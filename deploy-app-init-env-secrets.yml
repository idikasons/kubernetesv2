apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      name: jenkins
      labels:
        app: jenkins
    spec:
      initContainers:
        - name: init-db
          image: busybox:1.31
          command: ['sh', '-c', 'echo -e "checking database pod deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e ">> db started";' ]
      containers:
      - name: jenkins
        image: signaturedevops.azurecr.io/jenkins-new
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        
        env:
          - name: DB_HOSTNAME
            value: "mysql"
          - name: DB_PORT
            valueFrom: 
              secretKeyRef:
                name: mysql-db-credentials
                key: db-port
          - name: DB_NAME
            value: "webapp"
          - name: DB_USERNAME
            valueFrom: 
              secretKeyRef:
                name: mysql-db-credentials
                key: db-username
          - name: DB_PASSWORD
            valueFrom: 
              secretKeyRef:
                name: mysql-db-credentials
                key: db-password
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins-loadbalancer-service                         #LoadBalancer name

spec:
  type: LoadBalancer                                                                    # Type can be LoadBalancer, ClusterIp, NodePort
  selector:
    app: jenkins                                                             # App/name Loadbalancer traffic across Pods matching this label selector
  ports:
    - name: http
      port: 8080                                                                           #service port
      targetPort: 8080                                                                     #Container Port

##To deploy clusterIP or NodePort service, just change the type to either.
